sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",tabSetPanel(imageOutput('image'))), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",tabsetPanel(imageOutput('image'))), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",imageOutput('image')), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",imageOutput('image')), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud2.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",imageOutput('image')), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud2.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords2.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",imageOutput('image')), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud2.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords3.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",imageOutput('image')), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud2.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords2.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",imageOutput('image')), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud2.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords2.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
## Demo - add logo (icon or image)in the shinydashboard header (left side)
# load the required packages
library(shiny)
library(shinydashboard)
## ui code starts here
ui <- fluidPage(
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem('Analyse de sentiments', tabName = "Sarah")
)
),
dashboardBody(
tabItem(
tabName = "Sarah",
tabsetPanel(tabPanel("WordCloud",imageOutput('image')), tabPanel("Occurrence_mots",imageOutput('image2')), tabPanel("Sentiment_analysis", imageOutput('image3')))
)
)
)
)
shinyApp(ui, server = function(input, output, session) {
output$image <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/wordcloud2.png", width = 1200)
}
, deleteFile = FALSE)
output$image2 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/mostCommonWords2.png", width = 1200)
}
, deleteFile = FALSE)
output$image3 <- renderImage(
{
list(src = "/home/formateur/Documents/GitHub/Me/www/scoreSIA.png")
}
, deleteFile = FALSE)
})
#text =  paste(descr, collapse='')
text = toString(descr)
library(mongolite)
library(tidyverse)
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
myco <- mongo("PE_grp3", url=paste("mongodb://",user,":",password,"@127.0.0.1/Datalab2020?authSource=admin",sep =""))
user = 'scantonnet'
password = 'd}#2uyKYL}4e'
myco <- mongo("PE_grp3", url=paste("mongodb://",user,":",password,"@127.0.0.1/Datalab2020?authSource=admin",sep =""))
descr = myco$aggregate('[{"$project": {"_id" :0, "description": 1} }]')
#text =  paste(descr, collapse='')
text = toString(descr)
#text =  paste(descr, collapse='')
text = paste(descr, sep =' ')
#text =  paste(descr, collapse='')
text = paste(descr, sep ='"')
#text =  paste(descr, collapse='')
text = paste(descr, sep ='"', collapse = NULL)
#text =  paste(descr, collapse='')
text = paste(descr, sep ='"', collapse = " ")
text = toString(text, width = NULL)
library(mongolite)
library(tidyverse)
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
#source("config.R")
user = 'scantonnet'
password = 'd}#2uyKYL}4e'
myco <- mongo("PE_grp3", url=paste("mongodb://",user,":",password,"@127.0.0.1/Datalab2020?authSource=admin",sep =""))
descr = myco$aggregate('[{"$project": {"_id" :0, "description": 1} }]')
text = as.character(text)
text2 = as.character(text)
for (word in descr){
test3 = test3 + word
}
test3 = ""
test3 = test3 + word
test3 = ""
for (word in descr){
test3 = test3 + word
}
test3 = ""
for (word in descr){
test3 = paste(word)
}
for (word in descr){
text = paste(word)
}
docs <- Corpus(VectorSource(text))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convertir le texte en minuscule
docs <- tm_map(docs, content_transformer(tolower))
library(mongolite)
library(tidyverse)
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
#source("config.R")
user = 'scantonnet'
password = 'd}#2uyKYL}4e'
myco <- mongo("PE_grp3", url=paste("mongodb://",user,":",password,"@127.0.0.1/Datalab2020?authSource=admin",sep =""))
descr = myco$aggregate('[{"$project": {"_id" :0, "description": 1} }]')
for (word in descr){
text = paste(word)
}
docs <- Corpus(VectorSource(text))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "\n")
docs <- VCorpus(VectorSource(text))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "\n")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convertir le texte en minuscule
docs <- tm_map(docs, content_transformer(tolower))
# Supprimer les nombres
docs <- tm_map(docs, removeNumbers)
# Supprimer les mots vides anglais
docs <- tm_map(docs, removeWords, stopwords("french"))
# Supprimer votre propre liste de mots non désirés
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Supprimer les ponctuations
docs <- tm_map(docs, removePunctuation)
# Supprimer les espaces vides supplémentaires
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
View(d)
docs <- VCorpus(VectorSource(text))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "\n")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convertir le texte en minuscule
docs <- tm_map(docs, content_transformer(tolower))
# Supprimer les nombres
docs <- tm_map(docs, removeNumbers)
# Supprimer les mots vides anglais
docs <- tm_map(docs, removeWords, stopwords("french"))
# Supprimer votre propre liste de mots non désirés
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Supprimer les ponctuations
docs <- tm_map(docs, removePunctuation)
# Supprimer les espaces vides supplémentaires
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0,
colors=brewer.pal(8, "Dark2"))
warnings()
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=50, random.order=FALSE, rot.per=0,
colors=brewer.pal(8, "Dark2"))
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=50, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 20,
max.words=50, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 20,
max.words=50, random.order=FALSE, rot.per=0.35)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 20,
max.words=50, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 20,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
library(yaml)
yml <- yaml.load_file("config.yml")
setwd("/home/formateur/Documents/GitHub")
yml <- yaml.load_file("config.yml")
setwd("/home/formateur/Documents/GitHub/jobio_grp3")
yml <- yaml.load_file("config.yml")
yml <- yaml.load_file("config.yml")
yml <- yaml.load_file("config.yml")
yml <- yaml.load_file("config.yml")
yml <- yaml.load_file("config.yml")
user = yml$poleEmp
print user$user
print user["user"]
print(user$user)
user = yml$poleEmp$user
password = yml$poleEmp$psswd
myco <- mongo("PE_grp3", url=paste("mongodb://",user,":",password,"@127.0.0.1/Datalab2020?authSource=admin",sep =""))
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightblue", main ="Most frequent words",
ylab = "Word frequencies")
